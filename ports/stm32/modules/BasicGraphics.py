import framebuf

mono5x5 = [
    0x00, 0x00, 0x00, 0x00, 0x00,# Space	0x20 */
    0x08, 0x08, 0x08, 0x00, 0x08,# ! */
    0x0a, 0x4a, 0x40, 0x00, 0x00,# " */
    0x0a, 0x5f, 0xea, 0x5f, 0xea,# # */
    0x0e, 0xd9, 0x2e, 0xd3, 0x6e,# $ */
    0x19, 0x32, 0x44, 0x89, 0x33,# % */
    0x0c, 0x92, 0x4c, 0x92, 0x4d,# & */
    0x08, 0x08, 0x00, 0x00, 0x00,# ' */
    0x04, 0x88, 0x08, 0x08, 0x04,# ( */
    0x08, 0x04, 0x84, 0x84, 0x88,# ) */
    0x00, 0x0a, 0x44, 0x8a, 0x40,# // */
    0x00, 0x04, 0x8e, 0xc4, 0x80,# + */ 
    0x00, 0x00, 0x00, 0x04, 0x88,# , */
    0x00, 0x00, 0x0e, 0xc0, 0x00,# - */
    0x00, 0x00, 0x00, 0x08, 0x00,# . */
    0x01, 0x22, 0x44, 0x88, 0x10,# / */
    0x0c, 0x92, 0x52, 0x52, 0x4c,# 0		0x30 */
    0x04, 0x8c, 0x84, 0x84, 0x8e,# 1 */
    0x1c, 0x82, 0x4c, 0x90, 0x1e,# 2 */
    0x1e, 0xc2, 0x44, 0x92, 0x4c,# 3 */
    0x06, 0xca, 0x52, 0x5f, 0xe2,# 4 */
    0x1f, 0xf0, 0x1e, 0xc1, 0x3e,# 5 */
    0x02, 0x44, 0x8e, 0xd1, 0x2e,# 6 */
    0x1f, 0xe2, 0x44, 0x88, 0x10,# 7 */
    0x0e, 0xd1, 0x2e, 0xd1, 0x2e,# 8 */
    0x0e, 0xd1, 0x2e, 0xc4, 0x88,# 9 */
    0x00, 0x08, 0x00, 0x08, 0x00,# : */
    0x00, 0x04, 0x80, 0x04, 0x88,# ; */
    0x02, 0x44, 0x88, 0x04, 0x82,# < */
    0x00, 0x0e, 0xc0, 0x0e, 0xc0,# = */
    0x08, 0x04, 0x82, 0x44, 0x88,# > */
    0x0e, 0xd1, 0x26, 0xc0, 0x04,# ? */
    0x0e, 0xd1, 0x35, 0xb3, 0x6c,# @		0x40 */
    0x0c, 0x92, 0x5e, 0xd2, 0x52,# A */
    0x1c, 0x92, 0x5c, 0x92, 0x5c,# B */
    0x0e, 0xd0, 0x10, 0x10, 0x0e,# C */
    0x1c, 0x92, 0x52, 0x52, 0x5c,# D */
    0x1e, 0xd0, 0x1c, 0x90, 0x1e,# E */
    0x1e, 0xd0, 0x1c, 0x90, 0x10,# F */
    0x0e, 0xd0, 0x13, 0x71, 0x2e,# G */
    0x12, 0x52, 0x5e, 0xd2, 0x52,# H */
    0x1c, 0x88, 0x08, 0x08, 0x1c,# I */
    0x1f, 0xe2, 0x42, 0x52, 0x4c,# J */
    0x12, 0x54, 0x98, 0x14, 0x92,# K */
    0x10, 0x10, 0x10, 0x10, 0x1e,# L */
    0x11, 0x3b, 0x75, 0xb1, 0x31,# M */
    0x11, 0x39, 0x35, 0xb3, 0x71,# N */
    0x0c, 0x92, 0x52, 0x52, 0x4c,# O */
    0x1c, 0x92, 0x5c, 0x90, 0x10,# P		0x50 */ 
    0x0c, 0x92, 0x52, 0x4c, 0x86,# Q */ 
    0x1c, 0x92, 0x5c, 0x92, 0x51,# R */ 
    0x0e, 0xd0, 0x0c, 0x82, 0x5c,# S */ 
    0x1f, 0xe4, 0x84, 0x84, 0x84,# T */ 
    0x12, 0x52, 0x52, 0x52, 0x4c,# U */
    0x11, 0x31, 0x31, 0x2a, 0x44,# V */
    0x11, 0x31, 0x35, 0xbb, 0x71,# W */ 
    0x12, 0x52, 0x4c, 0x92, 0x52,# X */
    0x11, 0x2a, 0x44, 0x84, 0x84,# Y */
    0x1e, 0xc4, 0x88, 0x10, 0x1e,# Z */ 
    0x0e, 0xc8, 0x08, 0x08, 0x0e,# [ */ 
    0x10, 0x08, 0x04, 0x82, 0x41,# \ */
    0x0e, 0xc2, 0x42, 0x42, 0x4e,# ] */
    0x04, 0x8a, 0x40, 0x00, 0x00,# ^ */
    0x00, 0x00, 0x00, 0x00, 0x1f,# _ */
    0x08, 0x04, 0x80, 0x00, 0x00,# `		0x60 */ 
    0x00, 0x0e, 0xd2, 0x52, 0x4f,# a */ 
    0x10, 0x10, 0x1c, 0x92, 0x5c,# b */
    0x00, 0x0e, 0xd0, 0x10, 0x0e,# c */ 
    0x02, 0x42, 0x4e, 0xd2, 0x4e,# d */
    0x0c, 0x92, 0x5c, 0x90, 0x0e,# e */
    0x06, 0xc8, 0x1c, 0x88, 0x08,# f */ 
    0x0e, 0xd2, 0x4e, 0xc2, 0x4c,# g */ 
    0x10, 0x10, 0x1c, 0x92, 0x52,# h */
    0x08, 0x00, 0x08, 0x08, 0x08,# i */
    0x02, 0x40, 0x02, 0x42, 0x4c,# j */ 
    0x10, 0x14, 0x98, 0x14, 0x92,# k */ 
    0x08, 0x08, 0x08, 0x08, 0x06,# l */
    0x00, 0x1b, 0x75, 0xb1, 0x31,# m */
    0x00, 0x1c, 0x92, 0x52, 0x52,# n */ 
    0x00, 0x0c, 0x92, 0x52, 0x4c,# o */ 
    0x00, 0x1c, 0x92, 0x5c, 0x90,# p		0x70 */ 
    0x00, 0x0e, 0xd2, 0x4e, 0xc2,# q */ 
    0x00, 0x0e, 0xd0, 0x10, 0x10,# r */
    0x00, 0x06, 0xc8, 0x04, 0x98,# s */ 
    0x08, 0x08, 0x0e, 0xc8, 0x07,# t */ 
    0x00, 0x12, 0x52, 0x52, 0x4f,# u */
    0x00, 0x11, 0x31, 0x2a, 0x44,# v */
    0x00, 0x11, 0x31, 0x35, 0xbb,# w */ 
    0x00, 0x12, 0x4c, 0x8c, 0x92,# x */ 
    0x00, 0x11, 0x2a, 0x44, 0x98,# y */
    0x00, 0x1e, 0xc4, 0x88, 0x1e,# z */ 
    0x06, 0xc4, 0x8c, 0x84, 0x86,# { */ 
    0x08, 0x08, 0x08, 0x08, 0x08,# | */ 
    0x18, 0x08, 0x0c, 0x88, 0x18,# } */ 
    0x00, 0x00, 0x0c, 0x83, 0x60 # ~ */
    ]

mono8x5 = [
    0x00, 0x00, 0x00, 0x00, 0x00, #/* Space	0x20 */
    0x00, 0x00, 0x4f, 0x00, 0x00, #/* ! */
    0x00, 0x07, 0x00, 0x07, 0x00, #/* " */
    0x14, 0x7f, 0x14, 0x7f, 0x14, #/* # */
    0x24, 0x2a, 0x7f, 0x2a, 0x12, #/* $ */
    0x23, 0x13, 0x08, 0x64, 0x62, #/* % */
    0x36, 0x49, 0x55, 0x22, 0x20, #/* & */
    0x00, 0x05, 0x03, 0x00, 0x00, #/* ' */
    0x00, 0x1c, 0x22, 0x41, 0x00, #/* ( */
    0x00, 0x41, 0x22, 0x1c, 0x00, #/* ) */
    0x14, 0x08, 0x3e, 0x08, 0x14, #/* // */
    0x08, 0x08, 0x3e, 0x08, 0x08, #/* + */
    0x50, 0x30, 0x00, 0x00, 0x00, #/* , */
    0x08, 0x08, 0x08, 0x08, 0x08, #/* - */
    0x00, 0x60, 0x60, 0x00, 0x00, #/* . */
    0x20, 0x10, 0x08, 0x04, 0x02, #/* / */
    0x3e, 0x51, 0x49, 0x45, 0x3e, #/* 0		0x30 */
    0x00, 0x42, 0x7f, 0x40, 0x00, #/* 1 */
    0x42, 0x61, 0x51, 0x49, 0x46, #/* 2 */
    0x21, 0x41, 0x45, 0x4b, 0x31, #/* 3 */
    0x18, 0x14, 0x12, 0x7f, 0x10, #/* 4 */
    0x27, 0x45, 0x45, 0x45, 0x39, #/* 5 */
    0x3c, 0x4a, 0x49, 0x49, 0x30, #/* 6 */
    0x01, 0x71, 0x09, 0x05, 0x03, #/* 7 */
    0x36, 0x49, 0x49, 0x49, 0x36, #/* 8 */
    0x06, 0x49, 0x49, 0x29, 0x1e, #/* 9 */
    0x00, 0x36, 0x36, 0x00, 0x00, #/* : */
    0x00, 0x56, 0x36, 0x00, 0x00, #/* ; */
    0x08, 0x14, 0x22, 0x41, 0x00, #/* < */
    0x14, 0x14, 0x14, 0x14, 0x14, #/* = */
    0x00, 0x41, 0x22, 0x14, 0x08, #/* > */
    0x02, 0x01, 0x51, 0x09, 0x06, #/* ? */
    0x3e, 0x41, 0x5d, 0x55, 0x1e, #/* @		0x40 */
    0x7e, 0x11, 0x11, 0x11, 0x7e, #/* A */
    0x7f, 0x49, 0x49, 0x49, 0x36, #/* B */
    0x3e, 0x41, 0x41, 0x41, 0x22, #/* C */
    0x7f, 0x41, 0x41, 0x22, 0x1c, #/* D */
    0x7f, 0x49, 0x49, 0x49, 0x41, #/* E */
    0x7f, 0x09, 0x09, 0x09, 0x01, #/* F */
    0x3e, 0x41, 0x49, 0x49, 0x7a, #/* G */
    0x7f, 0x08, 0x08, 0x08, 0x7f, #/* H */
    0x00, 0x41, 0x7f, 0x41, 0x00, #/* I */
    0x20, 0x40, 0x41, 0x3f, 0x01, #/* J */
    0x7f, 0x08, 0x14, 0x22, 0x41, #/* K */
    0x7f, 0x40, 0x40, 0x40, 0x40, #/* L */
    0x7f, 0x02, 0x0c, 0x02, 0x7f, #/* M */
    0x7f, 0x04, 0x08, 0x10, 0x7f, #/* N */
    0x3e, 0x41, 0x41, 0x41, 0x3e, #/* O */
    0x7f, 0x09, 0x09, 0x09, 0x06, #/* P		0x50 */
    0x3e, 0x41, 0x51, 0x21, 0x5e, #/* Q */
    0x7f, 0x09, 0x19, 0x29, 0x46, #/* R */
    0x26, 0x49, 0x49, 0x49, 0x32, #/* S */
    0x01, 0x01, 0x7f, 0x01, 0x01, #/* T */
    0x3f, 0x40, 0x40, 0x40, 0x3f, #/* U */
    0x1f, 0x20, 0x40, 0x20, 0x1f, #/* V */
    0x3f, 0x40, 0x38, 0x40, 0x3f, #/* W */
    0x63, 0x14, 0x08, 0x14, 0x63, #/* X */
    0x07, 0x08, 0x70, 0x08, 0x07, #/* Y */
    0x61, 0x51, 0x49, 0x45, 0x43, #/* Z */
    0x00, 0x7f, 0x41, 0x41, 0x00, #/* [ */
    0x02, 0x04, 0x08, 0x10, 0x20, #/* \ */
    0x00, 0x41, 0x41, 0x7f, 0x00, #/* ] */
    0x04, 0x02, 0x01, 0x02, 0x04, #/* ^ */
    0x40, 0x40, 0x40, 0x40, 0x40, #/* _ */
    0x00, 0x00, 0x03, 0x05, 0x00, #/* `		0x60 */
    0x20, 0x54, 0x54, 0x54, 0x78, #/* a */
    0x7F, 0x44, 0x44, 0x44, 0x38, #/* b */
    0x38, 0x44, 0x44, 0x44, 0x44, #/* c */
    0x38, 0x44, 0x44, 0x44, 0x7f, #/* d */
    0x38, 0x54, 0x54, 0x54, 0x18, #/* e */
    0x04, 0x04, 0x7e, 0x05, 0x05, #/* f */
    0x08, 0x54, 0x54, 0x54, 0x3c, #/* g */
    0x7f, 0x08, 0x04, 0x04, 0x78, #/* h */
    0x00, 0x44, 0x7d, 0x40, 0x00, #/* i */
    0x20, 0x40, 0x44, 0x3d, 0x00, #/* j */
    0x7f, 0x10, 0x28, 0x44, 0x00, #/* k */
    0x00, 0x41, 0x7f, 0x40, 0x00, #/* l */
    0x7c, 0x04, 0x7c, 0x04, 0x78, #/* m */
    0x7c, 0x08, 0x04, 0x04, 0x78, #/* n */
    0x38, 0x44, 0x44, 0x44, 0x38, #/* o */
    0x7c, 0x14, 0x14, 0x14, 0x08, #/* p		0x70 */
    0x08, 0x14, 0x14, 0x14, 0x7c, #/* q */
    0x7c, 0x08, 0x04, 0x04, 0x08, #/* r */
    0x48, 0x54, 0x54, 0x54, 0x24, #/* s */
    0x04, 0x04, 0x3f, 0x44, 0x44, #/* t */
    0x3c, 0x40, 0x40, 0x20, 0x7c, #/* u */
    0x1c, 0x20, 0x40, 0x20, 0x1c, #/* v */
    0x3c, 0x40, 0x30, 0x40, 0x3c, #/* w */
    0x44, 0x28, 0x10, 0x28, 0x44, #/* x */
    0x0c, 0x50, 0x50, 0x50, 0x3c, #/* y */
    0x44, 0x64, 0x54, 0x4c, 0x44, #/* z */
    0x08, 0x36, 0x41, 0x41, 0x00, #/* { */
    0x00, 0x00, 0x77, 0x00, 0x00, #/* | */
    0x00, 0x41, 0x41, 0x36, 0x08, #/* } */
    0x08, 0x08, 0x2a, 0x1c, 0x08  #/* ~ */
    ]

class BasicGraphics:
    
    def __init__(self, width, height):
        self.colorFormat = 1
        self.width = width
        self.height = height
                 
        self.buffer1bpp = framebuf.FrameBuffer(bytearray(int(width * height / 8)), width, height, framebuf.MONO_VLSB)


    def Clear(self):        
        self.buffer1bpp.fill(0)

    def SetPixel(self, x, y, color):        
        self.buffer1bpp.pixel(x,y,color)
        
    def SetPixelScale(self, x, y, hScale, vScale, color):
        x = x*hScale;
        y = y*vScale;
        
        for ix in range(hScale):
            for iy in range(vScale):
                self.SetPixel(x + ix, y + iy, color)
        
            
    def DrawCharacter(self, character, color, x, y, hScale, vScale):
        index = 5 * (character - 32)
        
        if (hScale != 1 or vScale != 1):
            for horizontalFontSize in range(5):
                sx = x + horizontalFontSize
                fontRow = mono8x5[index + horizontalFontSize];
                for verticleFontSize in range(8):
                    if ((fontRow & (1 << verticleFontSize)) != 0):
                        self.SetPixelScale(sx, y + verticleFontSize, hScale, vScale, color)
        else:
            for horizontalFontSize in range(5):
                sx = x + horizontalFontSize
                fontRow = mono8x5[index + horizontalFontSize]
                for verticleFontSize in range(8):
                    if ((fontRow & (1 << verticleFontSize)) != 0):
                        self.SetPixel(sx, y + verticleFontSize, color)
                            
    def DrawTinyCharacter(self, character, color, x, y, clear):
        index = 5 * (character - 32)
        for col in range(5):
            for row in range(5):
                if (mono5x5[index + col] & (1 << (4 - row))) != 0:
                    self.SetPixel(x + row, y + col, color)
                else:
                    if clear == True:
                        self.SetPixel(x + row, y + col, 0)
                        
        
    def DrawTinyString(self, text, color, x, y, clear):
        for i in range(len(text)):
            self.DrawTinyCharacter(ord(text[i]), color, x, y, clear)
            x += 6
            if clear == True:
                for s in range(5):
                    self.SetPixel(x - 1, y + s, 0)
            
                        
    
    def DrawString(self, text, color, x, y, hScale = 1, vScale=1):
        originalX = x
        for i in range(len(text)):
            if ord(text[i]) >=32 :
                self.DrawCharacter(ord(text[i]), color, x, y, hScale, vScale)
                x += 6
            else:
                if text[i] == '\n':
                    y += 9
                    x = originalX;
                else:
                    if text[i] == '\r':
                        x = originalX;
                        
    def DrawLine(self, color, x0, y0, x1, y1):
        xLength = x1 - x0;
        yLength = y1 - y0;
        stepx = 0
        stepy = 0
        
        if yLength < 0 :
             yLength = -yLength
             stepy = -1
        else:
            stepy = 1
            
        if xLength < 0 :
            xLength = -xLength
            stepx = -1
        else:
            stepx = 1

        yLength <<= 1; 
        xLength <<= 1;
        
        self.SetPixel(x0, y0, color)
        
        if xLength > yLength:
            fraction = yLength - (xLength >> 1)
            while x0 != x1:
                if fraction >= 0:
                    y0 += stepy
                    fraction -= xLength
                x0 += stepx
                fraction += yLength
                self.SetPixel(x0, y0, color)
        else:
            fraction = xLength - (yLength >> 1)
            while y0 != y1:
                if fraction >= 0:
                    x0 += stepx
                    fraction -= yLength
                
                y0 += stepy
                fraction += xLength
                self.SetPixel(x0, y0, color)
                
    def DrawRectangle(self, color, x, y, width, height):
        for i in range(x, x+ width):
            self.SetPixel(i, y, color)
            self.SetPixel(i, y + height - 1, color)
        
        for i in range (y, y + height):
            self.SetPixel(x, i, color)
            self.SetPixel(x + width - 1, i, color)
            
    def DrawCircle(self, color, x, y, radius):
        if radius <= 0:
            return
        
        centerX = x
        centerY = y
        f = 1 - radius
        ddFX = 1
        ddFY = -2 * radius
        dX = 0
        dY = radius
        self.SetPixel(centerX, centerY + radius, color)
        self.SetPixel(centerX, centerY - radius, color)
        self.SetPixel(centerX + radius, centerY, color)
        self.SetPixel(centerX - radius, centerY, color)
        
        while dX < dY:
            if f >= 0:
                dY-=1
                ddFY += 2
                f += ddFY
            dX+=1
            ddFX += 2
            f += ddFX
            
            self.SetPixel(centerX + dX, centerY + dY, color);
            self.SetPixel(centerX - dX, centerY + dY, color);
            self.SetPixel(centerX + dX, centerY - dY, color);
            self.SetPixel(centerX - dX, centerY - dY, color);

            self.SetPixel(centerX + dY, centerY + dX, color);
            self.SetPixel(centerX - dY, centerY + dX, color);
            self.SetPixel(centerX + dY, centerY - dX, color);
            self.SetPixel(centerX - dY, centerY - dX, color);
           
    def DrawImage(self, img, x, y):
        index = 0;
        
        for vsize in range(img.Height):
            for hsize in range(img.Width):
                self.SetPixel(x + hsize, y + vsize, img.Data[index]);
                
           
    def CreateImage(self, data, width, height, hScale, vScale, transform):        
        img = Image(data, width, height)
        return img
    
    
    
class Image:
    NoTransform = 0    
    FlipVertical = 1
    Rotate90 = 2
    Rotate180 = 3
    Rotate270 = 4
    FlipHorizontal = 5

    def __init__(self, data, width, height, hScale = 1, vScale = 1, transform = NoTransform):
        if (type(data) is str):
            self.InitializeString(data, width, height, hScale, vScale, transform)
        else:
            self.CreateImage(data, width, height, hScale, vScale, transform)
        
   
    def InitializeString(self, text, width, height, hScale, vScale, transform):
        data = bytearray(len(text))
        
        for i in range(len(data)):
            if text[i] == ' ':
                data[i] = 0
            else:
                data[i] = ord(text[i])
                
        self.CreateImage(data, width, height, hScale, vScale, transform)
    
    def CreateImage(self, data, width, height, hScale, vScale, transform):
        if (width * height) != len(data):
            raise Exception("Incorrect image data size")
        
        self.Height = height * vScale;
        self.Width = width * hScale;
        self.Data = bytearray(self.Height * self.Width)
        
        for x in range(self.Width):                
            for y in range(self.Height):
                if transform == Image.NoTransform:                   
                    self.Data[int(y * self.Width + x)] = data[int(int(y / vScale) * width + int(x / hScale))]
                    
                if transform == Image.FlipHorizontal:
                    self.Data[int(y * self.Width + (self.Width - x - 1))] = data[int(int(y / vScale) * width + int(x / hScale))]
                    
                if transform == Image.FlipVertical:
                    self.Data[int((self.Height - y - 1) * self.Width + x)] = data[int(int(y / vScale) * width + int(x / hScale))]
                    
                if transform == Image.Rotate90:
                    self.Data[int(x * self.Height + self.Height - y - 1)] = data[int(int(y / vScale) * width + int(x / hScale))]
                    
                if transform == Image.Rotate180:
                    self.Data[int((self.Height - y - 1) * self.Width + (self.Width - x - 1))] = data[int(int(y / vScale) * width + int(x / hScale))]
                    
                if transform == Image.Rotate270:
                    self.Data[int((self.Width - x - 1) * self.Height + y)] = data[int(y / vScale * width + x / hScale)];
    
                
        
        
        
                          
                
            
        
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
